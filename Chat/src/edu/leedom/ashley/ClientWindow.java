package edu.leedom.ashley;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;

public class ClientWindow extends JFrame implements Runnable {
	private static final long serialVersionUID = 1L; // jframing stuff
	private JPanel contentPane;    // contentPane
	private JTextField txtMessage; // field for the message
	private JTextArea txtHistory; // field for history

	private Client client; // the client

	private boolean running = false; // boolean variable
	private Thread listen, run; // threads for listening and running
	
	// Method Name: ClientWindow
	// Parameters: name (String) - the name of the user
	//			   address (String) - the ipaddress of the user
	//			   port (int) - the port number
	// Return Value(s): None
	// Description: Creates a new client and starts the listening thread
	public ClientWindow(String name, String address, int port) {
		client = new Client( name, address, port );
		boolean connect = client.openConnection(address);

		if (!connect) {
			System.err.println("Connection failed!");
			console("Connection failed!");
			return;
		}

		// create window and connect the client to the server
		createWindow();
		String connection = "/c/" + name;
		client.send(connection.getBytes());
		
		// start the thread
		running = true;
		run = new Thread( this, "Running" );
		run.start();
	} // end ClientWindow()

	// Method Name: listen
	// Parameters: None
	// Return Value(s): None
	// Description: Listens for messages, receive and process them
	public void listen() {
		listen = new Thread("Listen") {
			public void run() {
				while (running) {
					String message = client.receive();

					if (message.startsWith("/c/")) {
						client.setID( Integer.parseInt( message.split( "/c/|/e/")[1]));
					} else if (message.startsWith("/m/")) {
						String text = message.split( "/m/|/e/")[1];
						console( text );
					}
				}
			}
		};
		listen.start();
	} // end listen()

	// Method Name: run
	// Parameters: None
	// Return Value(s): None
	// Description: Calls listen
	public void run() {
		listen();
	} // end run()

	// Method Name: createWindow
	// Parameters: None
	// Return Value(s): None
	// Description: Creates the messaging window
	private void createWindow() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e1) {
			e1.printStackTrace();
		}

		// gui stuff generated by windowbuilder
		setTitle("Client Window");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(880, 550);
		setLocationRelativeTo(null);
		contentPane = new JPanel();
		contentPane.setBackground(new Color(0, 255, 0));
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);

		GridBagLayout gbl_contentPane = new GridBagLayout();
		gbl_contentPane.columnWidths = new int[] { 28, 815, 30, 7 };
		gbl_contentPane.rowHeights = new int[] { 35, 475, 40 };
		gbl_contentPane.columnWeights = new double[] { 1.0, 1.0 };
		gbl_contentPane.rowWeights = new double[] { 1.0, Double.MIN_VALUE };
		contentPane.setLayout(gbl_contentPane);

		txtHistory = new JTextArea();
		txtHistory.setForeground(Color.WHITE);
		txtHistory.setBackground(Color.BLACK);
		txtHistory.setEditable(false);
		JScrollPane scroll = new JScrollPane(txtHistory);
		GridBagConstraints scrollConstraints = new GridBagConstraints();
		scrollConstraints.insets = new Insets(0, 0, 5, 5);
		scrollConstraints.fill = GridBagConstraints.BOTH;
		scrollConstraints.gridx = 0;
		scrollConstraints.gridy = 0;
		scrollConstraints.gridwidth = 3;
		scrollConstraints.gridheight = 2;
		scrollConstraints.insets = new Insets(0, 5, 0, 0);
		contentPane.add(scroll, scrollConstraints);

		// listen for Enter key on txtMessage
		txtMessage = new JTextField();
		txtMessage.setForeground(Color.WHITE);
		txtMessage.setBackground(Color.BLACK);
		txtMessage.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					send(txtMessage.getText());
				}
			}
		});

		// sets up gridBagContraints for txtMessage
		GridBagConstraints gbc_txtMessage = new GridBagConstraints();
		gbc_txtMessage.insets = new Insets(0, 0, 0, 5);
		gbc_txtMessage.fill = GridBagConstraints.HORIZONTAL;
		gbc_txtMessage.gridx = 0;
		gbc_txtMessage.gridy = 2;
		gbc_txtMessage.gridwidth = 2;
		contentPane.add(txtMessage, gbc_txtMessage);
		txtMessage.setColumns(10);

		// send button
		JButton btnSend = new JButton("Send");
		btnSend.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				send(txtMessage.getText());
			}
		});
		GridBagConstraints gbc_btnSend = new GridBagConstraints();
		gbc_btnSend.insets = new Insets(0, 0, 0, 5);
		gbc_btnSend.gridx = 2;
		gbc_btnSend.gridy = 2;
		contentPane.add(btnSend, gbc_btnSend);

		setVisible(true);
		txtMessage.requestFocusInWindow();
	} // end ClientWindow()

	// Method Name: send
	// Parameters: None
	// Return Value(s): None
	// Description: Calls client.send to use the client send message
	private void send(String message) {
		if (message.equals(""))
			return;

		message = "/m/" + client.getName() + ": " + message;
		client.send(message.getBytes());
		txtMessage.setText("");
	} // end send()

	// Method Name: console
	// Parameters: message (String) - the message to print
	// Return Value(s): None
	// Description: Displays the message on the text history screen
	public void console(String message) {
		txtHistory.append(message + "\n\r");
		txtHistory.setCaretPosition(txtHistory.getDocument().getLength());
	} // end consol()
} // end class ClientWindow